generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model products {
  id                 Int                  @id @default(autoincrement())
  name               String
  description        String
  tenant_id          String               @db.Uuid
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  category_id        Int
  min_price          Decimal              @db.Decimal
  min_price_img_url  String
  short_slogan       String?
  promo_label        String?
  product_categories product_categories[]
  categories         categories           @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  tenants            tenants              @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  variants           variants[]

  @@index([tenant_id, created_at], map: "idx_products_tenant_created_at")
  @@index([tenant_id, category_id], map: "idx_products_tenant_category")
}

model variants {
  id         Int      @id @default(autoincrement())
  product_id Int
  type       String
  price      Decimal  @db.Decimal(10, 2)
  stock      Int      @default(100)
  image_url  String
  carts      carts[]
  products   products @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model tenants {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String     @unique
  created_at DateTime?  @default(now()) @db.Timestamp(6)
  carts      carts[]
  products   products[]
  users      users[]
}

model users {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username  String
  password  String
  role      String  @default("user")
  tenant_id String  @db.Uuid
  carts     carts[]
  tenants   tenants @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([id, tenant_id], map: "id_tenant_unique")
  @@unique([username, tenant_id], map: "username_tenant_unique")
  @@index([tenant_id], map: "idx_users_tenant_created_at")
}

model carts {
  id         Int       @id @default(autoincrement())
  user_id    String?   @db.Uuid
  tenant_id  String?   @db.Uuid
  variant_id Int?
  quantity   Int       @default(1)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  tenants    tenants?  @relation(fields: [tenant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  variants   variants? @relation(fields: [variant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model register_logs {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id  String    @db.Uuid
  ip         String
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([tenant_id, ip])
}

model page_instance {
  id            String   @id
  page_type     String
  theme_name    String
  section_order String[] @default([])
  section_map   Json     @default("{}")
}

model section_instance {
  id           String   @id
  tenant_id    String
  theme_name   String
  scene_name   String
  section_name String
  props        Json
  updated_at   DateTime @default(now()) @db.Timestamp(6)
}

model section_registry {
  id            Int    @id @default(autoincrement())
  theme_name    String
  scene_name    String
  section_name  String
  schema        Json
  display_order Int    @default(0)

  @@unique([theme_name, scene_name, section_name])
}

model theme_options {
  tenant_id         String   @id
  theme_name        String
  page_instance_map Json
  updated_at        DateTime @default(now()) @db.Timestamp(6)
  theme_variant     String?
  version           Int?
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model categories {
  id                 Int                  @id @default(autoincrement())
  name               String
  tenant_id          String?              @db.Uuid
  parent_id          Int?
  categories         categories?          @relation("categoriesTocategories", fields: [parent_id], references: [id], onUpdate: NoAction)
  other_categories   categories[]         @relation("categoriesTocategories")
  product_categories product_categories[]
  products           products[]

  @@unique([tenant_id, name], map: "categories_tenant_name_key")
  @@index([parent_id], map: "idx_categories_parent")
  @@index([tenant_id, parent_id], map: "idx_categories_tenant_parent")
}

model product_categories {
  product_id  Int
  category_id Int
  tenant_id   String     @db.Uuid
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products    products   @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([product_id, category_id])
  @@index([category_id], map: "idx_product_categories_category")
  @@index([tenant_id], map: "idx_product_categories_tenant")
}
